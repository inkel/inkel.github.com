<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on inkel</title>
    <link>https://inkel.github.io/tags/go/</link>
    <description>Recent content in go on inkel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 27 Oct 2017 10:24:08 -0300</lastBuildDate>
    
	<atom:link href="https://inkel.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>lruc: a reverse cURL</title>
      <link>https://inkel.github.io/posts/reverse-curl/</link>
      <pubDate>Fri, 27 Oct 2017 10:24:08 -0300</pubDate>
      
      <guid>https://inkel.github.io/posts/reverse-curl/</guid>
      <description>Today Thorsten Ball asked a simple question on Twitter:
Does something like a reverse-curl exist? A tool that allows me to listen on a socket and return one HTTP response?
&amp;mdash; Thorsten Ball (@thorstenball) October 27, 2017  After a brief exchange of tweets, I said:
Or we could write one in Go ðŸ˜º
&amp;mdash; Lean (inkel) (@inkel) October 27, 2017  Twenty minutes later lruc was born.
Oh wow! :)</description>
    </item>
    
    <item>
      <title>On Go package names</title>
      <link>https://inkel.github.io/posts/on-go-package-names/</link>
      <pubDate>Sat, 14 Oct 2017 22:37:24 -0300</pubDate>
      
      <guid>https://inkel.github.io/posts/on-go-package-names/</guid>
      <description>Or why I renamed github.com/inkel/go-proxy-protocol to github.com/inkel/viaproxy. In my previous article I introduced a repository that hold the code to create net.Conn objects aware of the proxy protocol, but I wasn&amp;rsquo;t happy with the name of the repository.
Package names are important in Go, and one aspect that we tend to overlook is that they actually are part of the calling signature when you want to use an export type or function.</description>
    </item>
    
    <item>
      <title>Proxy Protocol: what is it and how to use it with Go</title>
      <link>https://inkel.github.io/posts/proxy-protocol/</link>
      <pubDate>Fri, 13 Oct 2017 14:30:00 -0300</pubDate>
      
      <guid>https://inkel.github.io/posts/proxy-protocol/</guid>
      <description>Today I became aware of the proxy protocol.
 The Proxy Protocol was designed to chain proxies / reverse-proxies without losing the client information.
 If you are proxying an HTTP(S) server, chances are that you have used the X-Forwarded-From header to keep the real remote address of the client making the request and not receving the proxy&amp;rsquo;s address instead. But this only works for HTTP(S): if you are proxying any other kind of TCP service, you are doomed.</description>
    </item>
    
  </channel>
</rss>