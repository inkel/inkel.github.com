<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on inkel</title>
    <link>http://inkel.github.io/tags/go/</link>
    <description>Recent content in Go on inkel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 26 Oct 2017 10:38:20 -0300</lastBuildDate>
    
	<atom:link href="http://inkel.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>EC2 Key Pairs Fingerprinting</title>
      <link>http://inkel.github.io/posts/ec2-key-fingerprint/</link>
      <pubDate>Thu, 26 Oct 2017 10:38:20 -0300</pubDate>
      
      <guid>http://inkel.github.io/posts/ec2-key-fingerprint/</guid>
      <description>Ever happened to you that you wanted to know which SSH key you need to connect to an AWS EC2 instance? I always found that the fingerprints don&amp;rsquo;t tell me much, espcially because I always forget how to compute the fingerprints. Good that I&amp;rsquo;m back to writing, so I&amp;rsquo;m dumping my memory here:
 if the key was generated by AWS, then use openssl pkcs8 -in path/to/key.pem -nocrypt -topk8 -outform DER | openssl sha1 -c if the key was generated using ssh-keygen then use openssl rsa -in path/to/private/key -pubout -outform DER | openssl md5 -c  Why does AWS uses one format and why SSH other?</description>
    </item>
    
    <item>
      <title>On Go package names</title>
      <link>http://inkel.github.io/posts/on-go-package-names/</link>
      <pubDate>Sat, 14 Oct 2017 22:37:24 -0300</pubDate>
      
      <guid>http://inkel.github.io/posts/on-go-package-names/</guid>
      <description>Or why I renamed github.com/inkel/go-proxy-protocol to github.com/inkel/viaproxy. In my previous article I introduced a repository that hold the code to create net.Conn objects aware of the proxy protocol, but I wasn&amp;rsquo;t happy with the name of the repository.
Package names are important in Go, and one aspect that we tend to overlook is that they actually are part of the calling signature when you want to use an export type or function.</description>
    </item>
    
    <item>
      <title>Proxy Protocol: what is it and how to use it with Go</title>
      <link>http://inkel.github.io/posts/proxy-protocol/</link>
      <pubDate>Fri, 13 Oct 2017 14:30:00 -0300</pubDate>
      
      <guid>http://inkel.github.io/posts/proxy-protocol/</guid>
      <description>Today I became aware of the proxy protocol.
 The Proxy Protocol was designed to chain proxies / reverse-proxies without losing the client information.
 If you are proxying an HTTP(S) server, chances are that you have used the X-Forwarded-From header to keep the real remote address of the client making the request and not receving the proxy&amp;rsquo;s address instead. But this only works for HTTP(S): if you are proxying any other kind of TCP service, you are doomed.</description>
    </item>
    
  </channel>
</rss>