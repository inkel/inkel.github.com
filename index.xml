<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>inkel</title>
    <link>https://inkel.github.io/</link>
    <description>Recent content on inkel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 28 Apr 2020 10:45:00 -0300</lastBuildDate>
    
	<atom:link href="https://inkel.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Working at Theorem: a typical day</title>
      <link>https://inkel.github.io/posts/typical-workday-at-theorem/</link>
      <pubDate>Tue, 28 Apr 2020 10:45:00 -0300</pubDate>
      
      <guid>https://inkel.github.io/posts/typical-workday-at-theorem/</guid>
      <description>I&amp;rsquo;ve joined CitrusbyteTheorem 9 years ago, and since day 1 it was a fully remote experience. Over the years I&amp;rsquo;ve learned lots about how to organize myself to approach each new workday although never gave much thought to it, until a few days ago, when while interviewing a candidate he asked what does a typical day at Theorem looks like. This post will try to address that question.
First and foremost, a disclaimer: by no means I speak on behalf of Theorem or the rest of my teammates; these are entirely my own experiences and do not reflect the reality of all the great people working at this company.</description>
    </item>
    
    <item>
      <title>CLI sort tricks</title>
      <link>https://inkel.github.io/posts/cli-sort-tricks/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://inkel.github.io/posts/cli-sort-tricks/</guid>
      <description>If you are like me you might have used the sort(1) CLI utility more than once in your life. Today, I&amp;rsquo;ve found a trick that I&amp;rsquo;ve never used before, and hopefully it will help someone else in the future.
Say that we have the following file to sort:
fpdy 01 08 wcfo juvi 01 02 ejan urbx 04 03 ckbw fkzq 01 08 myaz fjie 04 09 rhvo almv 04 02 adhs cuah 07 04 gbyt chok 09 06 nqwo emjd 01 04 ledx npto 02 10 nqsc Now, supposed that I wanted to sort first by the third column and then for the second one, then one would do sort -k 3 foo.</description>
    </item>
    
    <item>
      <title>Testing Terraform Providers</title>
      <link>https://inkel.github.io/posts/testing-terraform-providers/</link>
      <pubDate>Thu, 06 Dec 2018 15:50:17 -0300</pubDate>
      
      <guid>https://inkel.github.io/posts/testing-terraform-providers/</guid>
      <description>If there&amp;rsquo;s one piece of technology I&amp;rsquo;ve come to love and depend upon these last years it definitely is Terraform. Sadly, the only provider that seems to be complete is the AWS provider, but others seems to be missing some useful resources or data sources. As an example, these past days at work I had to work with the Azure provider and found that I was really missing the ability to query Azure for Virtual Machine IDs, but there wasn&amp;rsquo;t a data source for this, and I didn&amp;rsquo;t want to import the virtual machines we&amp;rsquo;ve already created (insert long story reasons here).</description>
    </item>
    
    <item>
      <title>Proxy Protocol Support in Curl</title>
      <link>https://inkel.github.io/posts/proxy-protocol-support-in-curl/</link>
      <pubDate>Wed, 21 Mar 2018 08:49:02 -0300</pubDate>
      
      <guid>https://inkel.github.io/posts/proxy-protocol-support-in-curl/</guid>
      <description>I&amp;rsquo;ve came across the following tweet the other day, and I couldn&amp;rsquo;t be more excited:
https://t.co/P3BbFqx1ro CURLOPT_HAPROXYPROTOCOL: support the HAProxy PROXY protocol
Add --haproxy-protocol for the command line tool
Cl...
&amp;mdash; curl commits (@curlcommits) March 17, 2018  This is exciting to me as the work I&amp;rsquo;ve been doing in viaproxy had one caveat: testing it works was a bit convoluted, as I was doing by running an HAProxy instance with a custom configuration like the following:</description>
    </item>
    
    <item>
      <title>Using responsive font sizes</title>
      <link>https://inkel.github.io/posts/responsive-font-size/</link>
      <pubDate>Wed, 06 Dec 2017 11:15:22 -0300</pubDate>
      
      <guid>https://inkel.github.io/posts/responsive-font-size/</guid>
      <description>Today Chad Ostrowski, a fellow engineer at Citrusbyte, shared an article he wrote: CSS pro tips: responsive font-sizes and when to use which units. After reading it, I couldn&amp;rsquo;t help myself and adapted some of the tips there to this site. It&amp;rsquo;s now much easier to maintain, I think, as I&amp;rsquo;ve removed all previous media queries, but I had to add one:
@media only screen and (min-device-width: 1200px) { html { font-size: calc(1em + 0.</description>
    </item>
    
    <item>
      <title>From PEM to OpenSSH for usage in ~/.ssh/authorized_keys</title>
      <link>https://inkel.github.io/posts/pem-to-authorized-keys/</link>
      <pubDate>Fri, 17 Nov 2017 15:51:51 -0300</pubDate>
      
      <guid>https://inkel.github.io/posts/pem-to-authorized-keys/</guid>
      <description>Say you have a private key in PEM format, and you want to use that key for SSH into another server, by adding an entry to your ~/.ssh/authorized_keys file with the public key of such PEM file. The following command will parse your PEM file and output the required RSA format used in authorized_keys:
ssh-keygen -y -f path/to/file.pem This will output a ssh-rsa AAAAâ€¦ string that is safe to append to your ~/.</description>
    </item>
    
    <item>
      <title>lruc: a reverse cURL</title>
      <link>https://inkel.github.io/posts/reverse-curl/</link>
      <pubDate>Fri, 27 Oct 2017 10:24:08 -0300</pubDate>
      
      <guid>https://inkel.github.io/posts/reverse-curl/</guid>
      <description>Today Thorsten Ball asked a simple question on Twitter:
Does something like a reverse-curl exist? A tool that allows me to listen on a socket and return one HTTP response?
&amp;mdash; Thorsten Ball (@thorstenball) October 27, 2017  After a brief exchange of tweets, I said:
Or we could write one in Go ðŸ˜º
&amp;mdash; Lean (inkel) (@inkel) October 27, 2017  Twenty minutes later lruc was born.
Oh wow! :)</description>
    </item>
    
    <item>
      <title>EC2 Key Pairs Fingerprinting</title>
      <link>https://inkel.github.io/posts/ec2-key-fingerprint/</link>
      <pubDate>Thu, 26 Oct 2017 10:38:20 -0300</pubDate>
      
      <guid>https://inkel.github.io/posts/ec2-key-fingerprint/</guid>
      <description>Ever happened to you that you wanted to know which SSH key you need to connect to an AWS EC2 instance? I always found that the fingerprints don&amp;rsquo;t tell me much, espcially because I always forget how to compute the fingerprints. Good that I&amp;rsquo;m back to writing, so I&amp;rsquo;m dumping my memory here:
 if the key was generated by AWS, then use openssl pkcs8 -in path/to/key.pem -nocrypt -topk8 -outform DER | openssl sha1 -c if the key was generated using ssh-keygen then use openssl rsa -in path/to/private/key -pubout -outform DER | openssl md5 -c  Why does AWS uses one format and why SSH other?</description>
    </item>
    
    <item>
      <title>On Go package names</title>
      <link>https://inkel.github.io/posts/on-go-package-names/</link>
      <pubDate>Sat, 14 Oct 2017 22:37:24 -0300</pubDate>
      
      <guid>https://inkel.github.io/posts/on-go-package-names/</guid>
      <description>Or why I renamed github.com/inkel/go-proxy-protocol to github.com/inkel/viaproxy. In my previous article I introduced a repository that hold the code to create net.Conn objects aware of the proxy protocol, but I wasn&amp;rsquo;t happy with the name of the repository.
Package names are important in Go, and one aspect that we tend to overlook is that they actually are part of the calling signature when you want to use an export type or function.</description>
    </item>
    
    <item>
      <title>Proxy Protocol: what is it and how to use it with Go</title>
      <link>https://inkel.github.io/posts/proxy-protocol/</link>
      <pubDate>Fri, 13 Oct 2017 14:30:00 -0300</pubDate>
      
      <guid>https://inkel.github.io/posts/proxy-protocol/</guid>
      <description>Today I became aware of the proxy protocol.
 The Proxy Protocol was designed to chain proxies / reverse-proxies without losing the client information.
 If you are proxying an HTTP(S) server, chances are that you have used the X-Forwarded-Fromheader to keep the real remote address of the client making the request and not receving the proxy&amp;rsquo;s address instead. But this only works for HTTP(S): if you are proxying any other kind of TCP service, you are doomed.</description>
    </item>
    
    <item>
      <title>Initial Commit</title>
      <link>https://inkel.github.io/posts/initial-commit/</link>
      <pubDate>Wed, 11 Oct 2017 15:47:00 -0300</pubDate>
      
      <guid>https://inkel.github.io/posts/initial-commit/</guid>
      <description>So here I am, once more, trying to have some sort of blog or journal. I&amp;rsquo;ll try to write about interesting pieces of code that I&amp;rsquo;ve written, problems I had to solve, books I&amp;rsquo;ve read (or dropped), et cetera. Don&amp;rsquo;t get your hopes too high, though, I&amp;rsquo;m lazy and tend to forget doing this kind of stuff.</description>
    </item>
    
  </channel>
</rss>